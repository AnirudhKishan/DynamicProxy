<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#  const int maxParameterCount = 5; #>
namespace DynamicProxy
{
	using System;
	using System.Dynamic;
	using System.Linq.Expressions;

	public partial interface IProxy<T>
	{
<# 
	for(int parametersCount = 1; parametersCount <= maxParameterCount; parametersCount++) { 
	   string parameters = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "T" + i));#>
	    /// <summary>
        /// Add interceptor to function with <#= parametersCount #> parameters that returns something;
        /// </summary>
        /// <param name="function">An expression pointing to a function</param>
        /// <param name="interceptor">The delegate containing the interceptor.</param>
        /// <returns>The IProxy so you can chain adding Transformers and Interceptors.</returns>
        IProxy<T> AddInterceptor<<#= parameters #>, TResult>(Expression<Action<T, <#= parameters #>>> function, Func<Func<<#= parameters #>, TResult>, <#= parameters #>, TResult> interceptor);
	
<#}#>

<# 
    for(int parametersCount = 1; parametersCount <= maxParameterCount; parametersCount++) { 
	   string parameters = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "T" + i));#>
	    /// <summary>
        /// Add interceptor to a void function with <#= parametersCount #> parameters;
        /// </summary>
        /// <param name="function">An expression pointing to a function</param>
        /// <param name="interceptor">The delegate containing the interceptor.</param>
        /// <returns>The IProxy so you can chain adding Transformers and Interceptors.</returns>
        IProxy<T> AddInterceptor<<#= parameters #>>(Expression<Action<T, <#= parameters #>>> function, Action<Action<<#= parameters #>>, <#= parameters #>> interceptor);

<#}#>
}

	public partial class ProxyFactory<T>
	{
	<# 
	for(int parametersCount = 1; parametersCount <= maxParameterCount; parametersCount++) { 
	   string parameters = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "T" + i));
	   string args = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "arg" + i));
	   string calleeArgs = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "(T" + i +")args[" + (i - 1) + "]"));#>
	public IProxy<T> AddInterceptor<<#= parameters #>, TResult>(Expression<Action<T, <#= parameters #>>> function, Func<Func<<#= parameters #>, TResult>, <#= parameters #>, TResult> interceptor)
		{
			return AddFunctionInterceptor(function, (del, args) => interceptor((<#= args #>) => (TResult) del(new object[] { <#= args #> }), <#= calleeArgs #>));
		}

	<#}

	for(int parametersCount = 1; parametersCount <= maxParameterCount; parametersCount++) { 
	   string parameters = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "T" + i));
	   string args = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "arg" + i));
	   string calleeArgs = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "(T" + i +")args[" + (i - 1) + "]"));#>	
        public IProxy<T> AddInterceptor<<#= parameters #>>(Expression<Action<T, <#= parameters #>>> function, Action<Action<<#= parameters #>>, <#= parameters #>> interceptor)
		{
			return AddFunctionInterceptor(function, (del, args) => 
			{
                interceptor((<#= args #>) => del(new object[] { <#= args #> }), <#= calleeArgs #>);
                return null;
            });
		}
	<#}#>
}
}